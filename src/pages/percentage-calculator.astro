---
---
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>All-in-One Percentage Calculator - Increase, Decrease, Growth, Difference</title>
  <meta name="description" content="Calculate percentage increase, decrease, difference, and growth with one easy tool. Clear inputs, instant results, and SEO-rich FAQs for every scenario." />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #f4f9f9;
      color: #333;
      padding: 2rem;
      margin: 0;
    }
    .container {
      max-width: 800px;
      margin: auto;
      background: #fff;
      padding: 2rem;
      border-radius: 1rem;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
    }
    h1, h2 {
      color: #264653;
    }
    label {
      font-weight: 600;
      margin-top: 1rem;
      display: block;
    }
    input {
      width: 100%;
      padding: 0.7rem;
      border-radius: 0.6rem;
      border: 1px solid #ccc;
      margin-top: 0.3rem;
    }
    button {
      margin-top: 1rem;
      border: none;
      border-radius: 2rem;
      padding: 0.8rem 1.2rem;
      font-size: 1rem;
      font-weight: 600;
      background: #a8dadc;
      color: #1d3557;
      cursor: pointer;
      transition: background 0.3s ease;
    }
    button:hover {
      background: #89c2d9;
    }
    .section {
      margin-bottom: 3rem;
    }
    .result {
      font-size: 1.2rem;
      font-weight: bold;
      margin-top: 1rem;
    }
    .faq {
      margin-top: 2rem;
    }
    .faq strong {
      display: block;
      margin-top: 1rem;
      color: #2a9d8f;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>All-in-One Percentage Calculator</h1>
    <p>Use this simple percentage calculator to instantly find percentage increase, loss (decrease), difference, and growth between any two values. Great for finance, shopping, math, and everyday decisions.</p>

    <div class="section">
      <h2>ðŸ“ˆ Percentage Increase</h2>
      <label>Original Value</label>
      <input id="increaseOld" type="number" placeholder="e.g. 100" />
      <label>New Value</label>
      <input id="increaseNew" type="number" placeholder="e.g. 120" />
      <button onclick="calculateIncrease()">Calculate Increase</button>
      <div class="result" id="increaseResult"></div>
    </div>

    <div class="section">
      <h2>ðŸ“‰ Percentage Decrease (Loss)</h2>
      <label>Original Value</label>
      <input id="decreaseOld" type="number" placeholder="e.g. 200" />
      <label>New Value</label>
      <input id="decreaseNew" type="number" placeholder="e.g. 150" />
      <button onclick="calculateDecrease()">Calculate Loss</button>
      <div class="result" id="decreaseResult"></div>
    </div>

    <div class="section">
      <h2>ðŸ”„ Percentage Difference</h2>
      <label>Value A</label>
      <input id="diffA" type="number" placeholder="e.g. 75" />
      <label>Value B</label>
      <input id="diffB" type="number" placeholder="e.g. 100" />
      <button onclick="calculateDifference()">Calculate Difference</button>
      <div class="result" id="diffResult"></div>
    </div>

    <div class="section">
      <h2>ðŸš€ Percentage Growth Over Time</h2>
      <label>Starting Value</label>
      <input id="growthStart" type="number" placeholder="e.g. 500" />
      <label>Ending Value</label>
      <input id="growthEnd" type="number" placeholder="e.g. 750" />
      <label>Days</label>
      <input id="growthDays" type="number" placeholder="e.g. 30" />
      <button onclick="calculateGrowth()">Calculate Growth</button>
      <div class="result" id="growthResult"></div>
      <canvas id="growthChart" style="margin-top:2rem;"></canvas>
    </div>
  </div>

  <script is:client="load">
    let growthChartInstance;

    function calculateIncrease() {
      const oldVal = parseFloat(document.getElementById("increaseOld").value);
      const newVal = parseFloat(document.getElementById("increaseNew").value);
      const resultEl = document.getElementById("increaseResult");
      if (isNaN(oldVal) || isNaN(newVal)) {
        resultEl.textContent = "Please enter valid numbers.";
        return;
      }
      if (newVal <= oldVal) {
        resultEl.textContent = "New value must be greater than original for a valid increase.";
        return;
      }
      const result = ((newVal - oldVal) / oldVal) * 100;
      resultEl.textContent = `Percentage Increase: ${result.toFixed(2)}%`;
    }

    function calculateDecrease() {
      const oldVal = parseFloat(document.getElementById("decreaseOld").value);
      const newVal = parseFloat(document.getElementById("decreaseNew").value);
      const resultEl = document.getElementById("decreaseResult");
      if (isNaN(oldVal) || isNaN(newVal)) {
        resultEl.textContent = "Please enter valid numbers.";
        return;
      }
      if (newVal >= oldVal) {
        resultEl.textContent = "New value must be less than original for a valid loss.";
        return;
      }
      const result = ((oldVal - newVal) / oldVal) * 100;
      resultEl.textContent = `Percentage Loss: ${result.toFixed(2)}%`;
    }

    function calculateDifference() {
      const a = parseFloat(document.getElementById("diffA").value);
      const b = parseFloat(document.getElementById("diffB").value);
      const resultEl = document.getElementById("diffResult");
      if (isNaN(a) || isNaN(b)) {
        resultEl.textContent = "Please enter valid numbers.";
        return;
      }
      const diff = Math.abs(a - b);
      const base = Math.min(a, b);
      const result = (diff / base) * 100;
      resultEl.textContent = `Percentage Difference: ${result.toFixed(2)}%`;
    }

	function calculateGrowth() {
	  const start = parseFloat(document.getElementById("growthStart").value);
	  const end = parseFloat(document.getElementById("growthEnd").value);
	  const days = parseInt(document.getElementById("growthDays").value);
	  const resultEl = document.getElementById("growthResult");
	  const chartEl = document.getElementById("growthChart");

	  if (isNaN(start) || isNaN(end) || isNaN(days) || start === 0 || days <= 0) {
	    resultEl.textContent = "Please enter valid numbers and a positive number of days.";
	    return;
	  }

	  const growth = ((end - start) / start) * 100;
	  resultEl.textContent = `Percentage Growth: ${growth.toFixed(2)}% over ${days} days.`;

	  const data = [];
	  const labels = [];
	  for (let i = 0; i <= days; i++) {
	    const progress = start + ((end - start) * (i / days));
	    data.push(progress);
	    labels.push(`Day ${i}`);
 	 }

	  // âœ… Destroy previous chart if exists
	  if (growthChartInstance) {
	    growthChartInstance.destroy();
	  }

	  // âœ… Create new chart
	  growthChartInstance = new Chart(chartEl, {
	    type: 'line',
	    data: {
	      labels: labels,
	      datasets: [{
 	       label: 'Growth Over Time',
 	       data: data,
	        fill: false,
	        borderColor: '#1d3557',
	        tension: 0.1
	      }]
	    },
	    options: {
	      responsive: true,
	      plugins: {
	        legend: {
	          display: true,
	          position: 'top'
	        }
	      }
	    }
	  });
	}
  </script>
</body>
</html>

